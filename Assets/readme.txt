ZeroFormatter
1) Команда для перегенерации
zfc.exe -i "..\..\..\Assembly-CSharp.csproj" -o "ZeroFormatterGenerated.cs" -e

zfc.exe -i "..\..\..\Server.csproj" -o "ZeroFormatterGenerated.cs" -e


zfc.exe -i "..\..\..\..\..\Server.csproj" -o "ZeroFormatterGenerated.cs" -e

2) Для всех сообщений в которыъ есть ushort нужно добавлять конструкторы с ushort. 
Иначе ushort может кастится к float и значение будет испорчено.

3) Для того, чтобы в структуре можно было использовать словарь нужно в конструкторе форматтера для этой
структуры зарегистрировать нужные типы. Например:
Formatter.RegisterDictionary<DefaultResolver, ushort, global::NetworkLibrary.NetworkLibrary.Udp.ServerToPlayer.PositionMessages.ViewTransform>();
Formatter.RegisterDictionary<DefaultResolver, ushort, ushort>();

//TODO можно не отправлять номер игрока и комнаты в сообщении о вводе, елси есть пинг сообщение
//иначе можно удалить пинг сообщения


Как матч завершается?
1) Ecs система когда становится мало игроков добавляет матч в очередь на удаление
2) В конце тика запускается убивание отмеченных матчей в MatchRemover
2.1) Матч достаёт из хранилища матчей
2.2) Отправляется rudp о завершении матча всем игрокам в матче ip которых известны (активные игроки)
2.3) У систем вызывается TearDown
2.4) Отправляется уведомление на матчмейкер
2.5) Чистится rudp сообщения этого матча через секунду (чтобы сообщения точно дошли)

Как сделать упаковку сообщений?
Есть константа максимального размера пакета в байтах (1500, 1200(у Pixonic), 500)?
Нельзя делать аллокации в игровом цикле
Для каждого игрока есть массив. Номер типа сообщения - это индекс. Элемент это обьект и признак изменения
Во время тика для каждого игрока эта структура изменется и у нужных полей ставится флажок изменения. 
Это сократит аллокации 
В конце тика пробегаюсь по этим сообщениям и делаю пакеты + устанавливаю флажок изменения обратно

Если есть сообщение с размером больше MTU, то нужно записать замечание и отправить его отдельно 