//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ShootingPointsComponent shootingPoints { get { return (ShootingPointsComponent)GetComponent(GameComponentsLookup.ShootingPoints); } }
    public bool hasShootingPoints { get { return HasComponent(GameComponentsLookup.ShootingPoints); } }

    public void AddShootingPoints(System.Collections.Generic.List<UnityEngine.Transform> newValues) {
        var index = GameComponentsLookup.ShootingPoints;
        var component = (ShootingPointsComponent)CreateComponent(index, typeof(ShootingPointsComponent));
        component.values = newValues;
        AddComponent(index, component);
    }

    public void ReplaceShootingPoints(System.Collections.Generic.List<UnityEngine.Transform> newValues) {
        var index = GameComponentsLookup.ShootingPoints;
        var component = (ShootingPointsComponent)CreateComponent(index, typeof(ShootingPointsComponent));
        component.values = newValues;
        ReplaceComponent(index, component);
    }

    public void RemoveShootingPoints() {
        RemoveComponent(GameComponentsLookup.ShootingPoints);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherShootingPoints;

    public static Entitas.IMatcher<GameEntity> ShootingPoints {
        get {
            if (_matcherShootingPoints == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ShootingPoints);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherShootingPoints = matcher;
            }

            return _matcherShootingPoints;
        }
    }
}
