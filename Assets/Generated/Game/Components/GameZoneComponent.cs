//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity zoneEntity { get { return GetGroup(GameMatcher.Zone).GetSingleEntity(); } }
    public ZoneComponent zone { get { return zoneEntity.zone; } }
    public bool hasZone { get { return zoneEntity != null; } }

    public GameEntity SetZone(ushort newId) {
        if (hasZone) {
            throw new Entitas.EntitasException("Could not set Zone!\n" + this + " already has an entity with ZoneComponent!",
                "You should check if the context already has a zoneEntity before setting it or use context.ReplaceZone().");
        }
        var entity = CreateEntity();
        entity.AddZone(newId);
        return entity;
    }

    public void ReplaceZone(ushort newId) {
        var entity = zoneEntity;
        if (entity == null) {
            entity = SetZone(newId);
        } else {
            entity.ReplaceZone(newId);
        }
    }

    public void RemoveZone() {
        zoneEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ZoneComponent zone { get { return (ZoneComponent)GetComponent(GameComponentsLookup.Zone); } }
    public bool hasZone { get { return HasComponent(GameComponentsLookup.Zone); } }

    public void AddZone(ushort newId) {
        var index = GameComponentsLookup.Zone;
        var component = (ZoneComponent)CreateComponent(index, typeof(ZoneComponent));
        component.id = newId;
        AddComponent(index, component);
    }

    public void ReplaceZone(ushort newId) {
        var index = GameComponentsLookup.Zone;
        var component = (ZoneComponent)CreateComponent(index, typeof(ZoneComponent));
        component.id = newId;
        ReplaceComponent(index, component);
    }

    public void RemoveZone() {
        RemoveComponent(GameComponentsLookup.Zone);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherZone;

    public static Entitas.IMatcher<GameEntity> Zone {
        get {
            if (_matcherZone == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Zone);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherZone = matcher;
            }

            return _matcherZone;
        }
    }
}
